Lecture 26- Data Cleaning And Normalization

Definition:
• Data Cleaning: Data cleaning involves identifying and correcting (or removing) errors and inconsistencies in data to improve its quality. Common tasks include handling missing values, removing duplicates, correcting errors, and ensuring consistency in data formats,

• Normalization: Normalization is the process of scaling numerical data to a standard range, typically between O and 1. or transforming it to have a mean of O and a standard deviation of 1. This process helps improve the performance of machine learning algorithms and ensures that all features contribute equally to the result.


Loading the Dataset

import panda as pd

#Load the dataset
df=pd.read_csv('sample_data.csv')
print(df)


identifying Missing Values

#check for missing values
print(df.isnull().sum())


df.info()



Removing Rows With Missing Values

#Remove rows with any missing values
df_cleaned=df.dropna()
print(df_cleaned)



Filling Missing Values

#Fill the missing values with a specific value
df_filled=df.fillna({
'Age':df['Age'].mean()
})
print(df_filled)


Forward Fill Method

#Forward fill method to propagate the next values backward
df_ffill=df.fillna(method='ffill')
print(df_ffill)



Backward Fill Method

#backward fill method to propagate the previous values forward
df_bfill=df.fillna(method='bfill')
print(df_bfill)



Removing Duplicates

#Add duplicate rows for demonstration
df=pd.concat([df,df.iloc[[0]],df.iloc[[1]],ignore_index=TRUE)
print('Before removing duplicates:\n',df)

#Remove duplicate rows
df_no_diplicates=df.drop_duplicates()
print('After removing duplicates:\n',df_no_duplicates)


Replacing Incorrect Values

# Replace incorrect values in the 'Department' Column
df_corrected=df.replace("'Department': {'HR':'Human Resources','Sales':,'Sale')
print(df_corrected)


Ensuring Consistency

#convert all department names to lowercase for consistency
df['Department']=df['Department'].str.lower()
print(df)


Min-Max Normalization:

# Apply Min-Max normalization using the formula
df_normalized df.copy()
for COl in ['Age', 'Salary']:
df_normalized=(df[col) - df[col] .min()) / (df[col] .max() -df[col].(min))
# Print original and normalized values
print( "Original DataFrame:")
print(df)
print("\nNorma1ized DataFrame:")
print (df_normalized)

